// Given a Binary Tree you need to  find maximum value which you  can get by subtracting value of node B from value of node A, 
// where A and B are two nodes of the binary tree and A is an ancestor of B. 

#include <bits/stdc++.h>
using namespace std;

// Author: K.Dilip

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct Node* newNode(int data)
{
    struct Node* node = (struct Node*)
        malloc(sizeof(struct Node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;

    return (node);
}

/* Your are required to 
complete this method*/
int max_d(Node* root, int& max_diff)
{
    if (root == NULL)
        return INT_MAX;

    if (root->left == NULL && root->right == NULL)
        return root->data;

    int l = max_d(root->left, max_diff);
    int r = max_d(root->right, max_diff);

    max_diff = max(max_diff, root->data - min(l, r));
    root->data = min(root->data, min(l, r));
    return root->data;
}

int maxDiff(Node* root)
{
    int max_di = INT_MIN;
    max_d(root, max_di);
    return max_di;
}

/* Driver program to test size function*/
int main()
{
    int t;
    struct Node* child;
    scanf("%d\n", &t);
    while (t--) {
        map<int, Node*> m;
        int n;
        scanf("%d\n", &n);
        struct Node* root = NULL;
        if (n == 1) {
            int a;
            cin >> a;
            cout << a << endl;
        }
        else {
            while (n--) {
                Node* parent;
                char lr;
                int n1, n2;
                scanf("%d %d %c", &n1, &n2, &lr);
                //  cout << n1 << " " << n2 << " " << (char)lr << endl;
                if (m.find(n1) == m.end()) {
                    parent = newNode(n1);
                    m[n1] = parent;
                    if (root == NULL)
                        root = parent;
                }
                else
                    parent = m[n1];

                child = newNode(n2);
                if (lr == 'L')
                    parent->left = child;
                else
                    parent->right = child;
                m[n2] = child;
            }

            cout << maxDiff(root) << endl;
        }
    }
    return 0;
}
